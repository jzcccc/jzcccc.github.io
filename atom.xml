<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jzcccc</title>
  
  
  <link href="http://jzcccc.github.io/atom.xml" rel="self"/>
  
  <link href="http://jzcccc.github.io/"/>
  <updated>2021-08-16T17:14:12.895Z</updated>
  <id>http://jzcccc.github.io/</id>
  
  <author>
    <name>Jzcccc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跳表</title>
    <link href="http://jzcccc.github.io/2021/08/16/skiplist/"/>
    <id>http://jzcccc.github.io/2021/08/16/skiplist/</id>
    <published>2021-08-16T12:00:36.000Z</published>
    <updated>2021-08-16T17:14:12.895Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><blockquote><p>从0到99之间，随机猜字，需要猜多少次？</p></blockquote><img src="/image-20210817000754587.png" alt="image-20210817000754587" style="zoom: 20%;" /><p>二分查找法的时间复杂度 : O(logn)</p><p>二分查找的效率： 比如 n 等于 2 的 32 次方，大约是 42 亿。也就是说，如果我们在 42 亿个数据中用二分查找一个数据，最多需要比较 32 次。</p><h2 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h2><h3 id="什么是跳表"><a href="#什么是跳表" class="headerlink" title="什么是跳表"></a>什么是跳表</h3><blockquote><p>基于链表，加上多级索引，减少遍历的结束数</p></blockquote><p>对单链表进行查询时，时间复杂度时O(n)。</p><p>当对原始链表建立一级“索引”时，每两个结点提取一个结点所为索引。例如查找16，如果是单链表，需要遍历10次；</p><p>如果建立一层索引，只需要遍历7次；建立2级索引，只需要6次。</p><img src="/image-20210817001838421.png" alt="image-20210817001838421" style="zoom:25%;" /><p>若是一个64结点，五级索引的跳表，寻找62，只需要遍历11个结点</p><img src="/image-20210817002122731.png" alt="image-20210817002122731" style="zoom:25%;" /><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><blockquote><p>与二分查找法一样，O(logn)</p></blockquote><ol><li><p>每两个结点抽出一个结点，作为上一级索引，那一级索引结点个数大约为n/2，二级数量为n/4，以此类推，</p><p>第k-1级索引为1/2，那么第k级结点个数为 <strong>n/(2^k)</strong></p></li><li><p>假设索引有h级，最高级索引2个结点。按照公式，<strong>n/(2^h)=2</strong>，从而求得 <strong>h=log2n-1</strong>。如果包含原始链表，那么跳表的</p><p>高度就是 <strong>log2n</strong> ，如果每一层需要遍历m个结点，那么跳表的时间复杂度就是 *<em>O(m</em>logn)**。</p></li><li><p>假设现在要查找的数据是x，在第k级索引中，遍历y后，发现x大于y，小于z，通过down指针下探，可以发现，y和z之间</p><p>只有3个结点。</p><p>​                                             <img src="/image-20210817003612920.png" alt="image-20210817003612920" style="zoom:25%;" /></p><p>结合分析可以知道，跳表中查询任意数据的时间复杂度为  **O(logn)**。</p></li></ol><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><blockquote><p>O(n)</p></blockquote><ol><li>假设原始链表为n，一级索引则为n/2，以此类推…，n/2+n/4+n/8…+8+4+2=n-2。</li></ol><img src="/image-20210817003923337.png" alt="image-20210817003923337" style="zoom:25%;" /><ol start="2"><li><p>假设扩大间隔，每3个结点抽一个索引。同样类推可得 n/3, n/9,n/27,…,9,3,1，虽然还是等比数列，最后同样是n-2。</p><p>但对比两个结点的构建方式，减少近一半存储空间。</p></li></ol><p>时间开发中，当原链表中存储的对象可能很大时，而索引结点只需要存储关键值以及索引，那么索引占用的额外空间其实可以忽略。</p><h3 id="高效的动态插入和删除"><a href="#高效的动态插入和删除" class="headerlink" title="高效的动态插入和删除"></a>高效的动态插入和删除</h3><p>在单链表中，单定位好要插入的位置，插入结点的时间复杂度就是O(1)。但是，为了保证原始链表中数据的有序性，需要先找好</p><p>插入的位置，即 <strong>O(logn)</strong></p><p>​                                                        <img src="/image-20210817004645488.png" alt="image-20210817004645488" style="zoom:40%;" /></p><h3 id="跳表索引动态更新"><a href="#跳表索引动态更新" class="headerlink" title="跳表索引动态更新"></a>跳表索引动态更新</h3><p>当不停的插入数据，不动态更新时，可能会出现极端情况</p><img src="/image-20210817005010666.png" alt="image-20210817005010666" style="zoom:50%;" /><p>跳表使用随机函数来维护“平衡性”，即当插入时，可以选择同时将这个数据插入到部分索引层中。例如下图，随机函数</p><p>生成值k，即插入到第一级和第k级索引中。</p><img src="/image-20210817005218513.png" alt="image-20210817005218513" style="zoom:30%;" /><h3 id="跳表的应用"><a href="#跳表的应用" class="headerlink" title="跳表的应用"></a>跳表的应用</h3><blockquote><p>Redis中的有序集合</p></blockquote><p>有序集合的核心操作</p><ul><li>插入一个数据</li><li>删除一个数据</li><li>查找一个数据</li><li>按区间查找数据</li><li>迭代数据有序序列</li></ul><p>跳表的效率与红黑树相似，大部分功能其实红黑树也能实现，但是按照区间查找数据，跳表可以做到O(logn)时间复杂度</p><p>定位区间的起点，然后在原始链表中进行遍历，非常高效。</p><p>另外，跳表相对于红黑树，相对容易实现，更好理解。而简单就意味着可读性好，不容易出错。还有，跳表更加灵活，它可以通过改变索引构建策略，有效平衡执行效率和内存消耗。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;二分查找法&quot;&gt;&lt;a href=&quot;#二分查找法&quot; class=&quot;headerlink&quot; title=&quot;二分查找法&quot;&gt;&lt;/a&gt;二分查找法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;从0到99之间，随机猜字，需要猜多少次？&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    
    <category term="算法" scheme="http://jzcccc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO &amp;&amp; Netty</title>
    <link href="http://jzcccc.github.io/2021/07/22/Java-NIO-Netty/"/>
    <id>http://jzcccc.github.io/2021/07/22/Java-NIO-Netty/</id>
    <published>2021-07-21T16:50:43.000Z</published>
    <updated>2021-07-22T07:13:12.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-NIO-Netty学习篇"><a href="#Java-NIO-Netty学习篇" class="headerlink" title="Java NIO Netty学习篇"></a>Java NIO Netty学习篇</h1><p>[TOC]</p><h2 id="Netty学习资料"><a href="#Netty学习资料" class="headerlink" title="Netty学习资料"></a>Netty学习资料</h2><h3 id="博客-公众号"><a href="#博客-公众号" class="headerlink" title="博客 公众号"></a>博客 公众号</h3><p>NIO、BIO、AIO 区别 <a href="https://www.cnblogs.com/javaguide/p/io.html">https://www.cnblogs.com/javaguide/p/io.html</a></p><p>IO模型知多少｜理论篇 <a href="https://www.cnblogs.com/sheng-jie/p/how-much-you-know-about-io-models.html">https://www.cnblogs.com/sheng-jie/p/how-much-you-know-about-io-models.html</a></p><p>netty从入门到踹门 <a href="https://mp.weixin.qq.com/s/GfV9w2B0mbT7PmeBS45xLw">https://mp.weixin.qq.com/s/GfV9w2B0mbT7PmeBS45xLw</a></p><p>并发编程网  Java NIO 系列教程 <a href="https://ifeve.com/java-nio-all/">https://ifeve.com/java-nio-all/</a></p><p>java nio 美团技术团队   Java NIO浅析 <a href="https://zhuanlan.zhihu.com/p/23488863">https://zhuanlan.zhihu.com/p/23488863</a></p><p>javaguide  netty从bio讲起，附带学习视频&amp;书籍推荐 <a href="https://github.com/Snailclimb/netty-practical-tutorial/blob/master/docs/1-fromBIO%26NIOToNetty.md">https://github.com/Snailclimb/netty-practical-tutorial/blob/master/docs/1-fromBIO%26NIOToNetty.md</a></p><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><p>Essential Netty in Action 《Netty 实战(精髓)》 <a href="https://waylau.com/essential-netty-in-action/index.html">https://waylau.com/essential-netty-in-action/index.html</a></p><p>UNIX网络编程卷1  链接: <a href="https://pan.baidu.com/s/1ThZSsi8o5EVtBjGwL9o1zw">https://pan.baidu.com/s/1ThZSsi8o5EVtBjGwL9o1zw</a>  密码: g32p</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>JavaGuide Netty面试题 <a href="https://xiaozhuanlan.com/topic/4028536971">https://xiaozhuanlan.com/topic/4028536971</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-NIO-Netty学习篇&quot;&gt;&lt;a href=&quot;#Java-NIO-Netty学习篇&quot; class=&quot;headerlink&quot; title=&quot;Java NIO Netty学习篇&quot;&gt;&lt;/a&gt;Java NIO Netty学习篇&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="netty" scheme="http://jzcccc.github.io/tags/netty/"/>
    
  </entry>
  
</feed>
