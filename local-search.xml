<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java的CAS实现原理</title>
    <link href="/2022/03/20/cas/"/>
    <url>/2022/03/20/cas/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS"></a>什么是CAS</h2><p>用于多线程环境下同步机制，是一种无锁的原子操作。CAS包含三个操作数：内存位置、预期数值和新值。CAS的实现逻辑，是将内存地址处的数值与期望值进行比较，若一致，则将内存处的值替换为新值。若不相等，则不做任何操作。</p><p>当多个线程竞争，同时操作一个数据时，通过CAS操作，只有一个线程会更新成功，而失败的线程不会线程挂起，可以自旋进行CAS操作。整个操作时无锁的，失败线程无需挂起，唤醒操作，不存在阻塞，也就提高CPU执行指令数，提高了效率。</p><p>但是也有一定缺点，比如多线程竞争，如果其中一个线程一致CAS失败，如果一直自旋，可能会造成CPU开销大。</p><p>CAS底层基于硬件平台的汇编指令。</p><h2 id="JAVA中的CAS实现"><a href="#JAVA中的CAS实现" class="headerlink" title="JAVA中的CAS实现"></a>JAVA中的CAS实现</h2><p>可以看看Java中线程安全的<code>AtomicInteger</code> ，对于CAS的操作。</p><p>compareAndSet 调用底层unsafe.compareAndSwapInt方法，传入当前对象，内存地址、期望值、更新值。底层就是在更新值之前，先对比内存地址 的值 == 期望值，如果相等，那就更新值。否则，一直while循环直到更新成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomicInteger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">6214790243416807050L</span>;<br><br>    <span class="hljs-comment">// setup to use Unsafe.compareAndSwapInt for updates</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> valueOffset;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            valueOffset = unsafe.objectFieldOffset<br>                (AtomicInteger.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(ex); &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> value;<br>  <br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Atomically increments by one the current value.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the updated value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">incrementAndGet</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> unsafe.getAndAddInt(<span class="hljs-keyword">this</span>, valueOffset, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    &#125;<br>  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">compareAndSet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> expect, <span class="hljs-keyword">int</span> update)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> unsafe.compareAndSwapInt(<span class="hljs-keyword">this</span>, valueOffset, expect, update);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>unsafe调用native方法进行底层的cas操作，自旋直到成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//// Unsafe</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAndAddInt</span><span class="hljs-params">(Object var1, <span class="hljs-keyword">long</span> var2, <span class="hljs-keyword">int</span> var4)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> var5;<br>  <span class="hljs-keyword">do</span> &#123;<br>    var5 = <span class="hljs-keyword">this</span>.getIntVolatile(var1, var2);<br>  &#125; <span class="hljs-keyword">while</span>(!<span class="hljs-keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>  <span class="hljs-keyword">return</span> var5;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Unsafe是JVM提供的不安全的访问底层系统资源的API，能直接访问CPU和其他硬件功能，详情可以看 <a href="https://blogs.oracle.com/javamagazine/post/the-unsafe-class-unsafe-at-any-speed">https://blogs.oracle.com/javamagazine/post/the-unsafe-class-unsafe-at-any-speed</a></p></blockquote><h2 id="CAS底层实现"><a href="#CAS底层实现" class="headerlink" title="CAS底层实现"></a>CAS底层实现</h2><p>现代计算机操作系统、由于CPU与内存的性能差异，一般会在CPU缓存操作数据，而CPU缓存与内存之间，就会存在一致性问题。</p><p>CPU与缓存之间的数据交互，通过总线通信</p><img src="https://gitee.com/jzcccc/pig-go/raw/master/img/20220320011319.png" alt="image-20220319235635143" style="zoom:50%;" /><p>当涉及到 读取–修改–更新 这类非原子操作时，就会出现原子性问题。</p><h3 id="CPU保证原子性的方式"><a href="#CPU保证原子性的方式" class="headerlink" title="CPU保证原子性的方式"></a><strong>CPU保证原子性的方式</strong></h3><ol><li><p>CPU本身保证基本的原子性，对同一个缓存行里进行16/32/64位的操作时原子性的。</p></li><li><p>通过<strong>总线锁定</strong>来保证原子性</p><p>通过<strong>Lock指令</strong>，在操作缓存值时，锁定总线，此时其他处理器的请求都会被阻塞，当前处理器独占共享内存。缺点很明显，此操作会非常影响效率，大大降低吞吐量</p></li><li><p>通过<strong>缓存锁定</strong>来保证原子性</p><p>当指定内存区域被CPU缓存，并且没有跨缓存行，此时可以通过锁定该数据来保证操作的原子性。lock后的写操作会主动向主内存回写修改数据，同时让其他CPU缓存失效，重新加载内存数据。</p></li></ol><h3 id="CAS存在问题"><a href="#CAS存在问题" class="headerlink" title="CAS存在问题"></a>CAS存在问题</h3><h4 id="循环时间长"><a href="#循环时间长" class="headerlink" title="循环时间长"></a>循环时间长</h4><p>JUC中，BlockingQueue的SynchronousQueue 对自旋次数做了限制，避免CAS导致CPU开销大</p><h4 id="只能保证一个共享变量原子性"><a href="#只能保证一个共享变量原子性" class="headerlink" title="只能保证一个共享变量原子性"></a>只能保证一个共享变量原子性</h4><p>JDK5增加了 <code>AtomicReference</code> 可以保证引用对象的原子性</p><h4 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h4><p>线程1读取数据A，未进行操作，线程2 经过 A-&gt;B-&gt;A操作过程，此时线程1继续操作，不会发现做过改变。</p><p>一般来说，ABA问题可以忽略，如果实在要保证没有ABA问题，可以在每个数加上版本号标识</p><h4 id="CAS造成Cache一致性流量过大"><a href="#CAS造成Cache一致性流量过大" class="headerlink" title="CAS造成Cache一致性流量过大"></a>CAS造成Cache一致性流量过大</h4><p>可重入锁在加锁/解锁过程中，会进行CAS操作，而被CAS导致缓存失效的核心，会去内存获取最新值，如果线程太多，会导致流量过大，总线成为性能瓶颈。</p><p>轻量级锁使用CAS避免监视器的使用，偏向锁在无竞争条件下，连CAS都可以不用做了。主要就是在第一次获取锁时，将对象头中的锁标志改为偏向模式，那么后续每次进入监视器内的代码块，就不需要任何操作。</p><h2 id="Lock与内存屏障"><a href="#Lock与内存屏障" class="headerlink" title="Lock与内存屏障"></a>Lock与内存屏障</h2><blockquote><p>LOCK汇编命令使相应的机器码指令中添加了相关内存屏障指令，也就是说汇编层面<strong>LOCK指令</strong>的功能是通过CPU层面的<strong>内存屏障</strong>机器码实现的。</p></blockquote><p>Java中的volatile，与CAS类似，可以用来保证属性的原子性。有关volatile、内存屏障、以及前面讲到的轻量级锁、偏向锁，可以看《深入理解JAVA虚拟机》第五部分 ，里面讲了Java内存模型，以及线程安全和锁优化相关知识。</p><p>也可以看看 《volatile 关键字详解 》<a href="https://blog.csdn.net/cy973071263/article/details/104383636">https://blog.csdn.net/cy973071263/article/details/104383636</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>CAS原理分析 <a href="https://segmentfault.com/a/1190000014858404">https://segmentfault.com/a/1190000014858404</a></p><p>volatile 关键字详解 <a href="https://blog.csdn.net/cy973071263/article/details/104383636">https://blog.csdn.net/cy973071263/article/details/104383636</a></p><p>CAS操作的底层原理 <a href="https://blog.nowcoder.net/n/3f413b4af088415baafc159591a1a411">https://blog.nowcoder.net/n/3f413b4af088415baafc159591a1a411</a></p><p>《深入理解JAVA虚拟机》 第五部分 高效并发，有关Java内存模型，锁优化部分</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跳表</title>
    <link href="/2021/08/16/skiplist/"/>
    <url>/2021/08/16/skiplist/</url>
    
    <content type="html"><![CDATA[<h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><blockquote><p>从0到99之间，随机猜字，需要猜多少次？</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jzcccc/pic/img/20231122120022.png" alt="image-20210817000754587"></p><p>二分查找法的时间复杂度 : O(logn)</p><p>二分查找的效率： 比如 n 等于 2 的 32 次方，大约是 42 亿。也就是说，如果我们在 42 亿个数据中用二分查找一个数据，最多需要比较 32 次。</p><h2 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h2><h3 id="什么是跳表"><a href="#什么是跳表" class="headerlink" title="什么是跳表"></a>什么是跳表</h3><blockquote><p>基于链表，加上多级索引，减少遍历的结束数</p></blockquote><p>对单链表进行查询时，时间复杂度时O(n)。</p><p>当对原始链表建立一级“索引”时，每两个结点提取一个结点所为索引。例如查找16，如果是单链表，需要遍历10次；</p><p>如果建立一层索引，只需要遍历7次；建立2级索引，只需要6次。</p><p><img src="https://cdn.jsdelivr.net/gh/jzcccc/pic/img/20231122120103.png" alt="image-20210817001838421"></p><p>若是一个64结点，五级索引的跳表，寻找62，只需要遍历11个结点</p><p><img src="https://cdn.jsdelivr.net/gh/jzcccc/pic/img/20231122120123.png" alt="image-20210817002122731"></p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><blockquote><p>与二分查找法一样，O(logn)</p></blockquote><ol><li><p>每两个结点抽出一个结点，作为上一级索引，那一级索引结点个数大约为n/2，二级数量为n/4，以此类推，</p><p>第k-1级索引为1/2，那么第k级结点个数为 <strong>n/(2^k)</strong></p></li><li><p>假设索引有h级，最高级索引2个结点。按照公式，<strong>n/(2^h)=2</strong>，从而求得 <strong>h=log2n-1</strong>。如果包含原始链表，那么跳表的</p><p>高度就是 <strong>log2n</strong> ，如果每一层需要遍历m个结点，那么跳表的时间复杂度就是 *<em>O(m</em>logn)**。</p></li><li><p>假设现在要查找的数据是x，在第k级索引中，遍历y后，发现x大于y，小于z，通过down指针下探，可以发现，y和z之间</p><p>只有3个结点。</p><p>​                                             <img src="https://cdn.jsdelivr.net/gh/jzcccc/pic/img/20231122120143.png" alt="image-20210817003612920"></p><p>结合分析可以知道，跳表中查询任意数据的时间复杂度为  **O(logn)**。</p></li></ol><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><blockquote><p>O(n)</p></blockquote><ol><li>假设原始链表为n，一级索引则为n/2，以此类推…，n/2+n/4+n/8…+8+4+2=n-2。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/jzcccc/pic/img/20231122120231.png" alt="image-20210817003923337"></p><ol start="2"><li><p>假设扩大间隔，每3个结点抽一个索引。同样类推可得 n/3, n/9,n/27,…,9,3,1，虽然还是等比数列，最后同样是n-2。</p><p>但对比两个结点的构建方式，减少近一半存储空间。</p></li></ol><p>时间开发中，当原链表中存储的对象可能很大时，而索引结点只需要存储关键值以及索引，那么索引占用的额外空间其实可以忽略。</p><h3 id="高效的动态插入和删除"><a href="#高效的动态插入和删除" class="headerlink" title="高效的动态插入和删除"></a>高效的动态插入和删除</h3><p>在单链表中，单定位好要插入的位置，插入结点的时间复杂度就是O(1)。但是，为了保证原始链表中数据的有序性，需要先找好</p><p>插入的位置，即 <strong>O(logn)</strong></p><p>​                                                        <img src="https://cdn.jsdelivr.net/gh/jzcccc/pic/img/20231122120246.png" alt="image-20210817004645488"></p><h3 id="跳表索引动态更新"><a href="#跳表索引动态更新" class="headerlink" title="跳表索引动态更新"></a>跳表索引动态更新</h3><p>当不停的插入数据，不动态更新时，可能会出现极端情况</p><p><img src="https://cdn.jsdelivr.net/gh/jzcccc/pic/img/20231122115422.png" alt="image-20210817005010666"></p><p>跳表使用随机函数来维护“平衡性”，即当插入时，可以选择同时将这个数据插入到部分索引层中。例如下图，随机函数</p><p>生成值k，即插入到第一级和第k级索引中。</p><p><img src="https://cdn.jsdelivr.net/gh/jzcccc/pic/img/20231122115412.png" alt="image-20210817005218513"></p><h3 id="跳表的应用"><a href="#跳表的应用" class="headerlink" title="跳表的应用"></a>跳表的应用</h3><blockquote><p>Redis中的有序集合</p></blockquote><p>有序集合的核心操作</p><ul><li>插入一个数据</li><li>删除一个数据</li><li>查找一个数据</li><li>按区间查找数据</li><li>迭代数据有序序列</li></ul><p>跳表的效率与红黑树相似，大部分功能其实红黑树也能实现，但是按照区间查找数据，跳表可以做到O(logn)时间复杂度</p><p>定位区间的起点，然后在原始链表中进行遍历，非常高效。</p><p>另外，跳表相对于红黑树，相对容易实现，更好理解。而简单就意味着可读性好，不容易出错。还有，跳表更加灵活，它可以通过改变索引构建策略，有效平衡执行效率和内存消耗。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星图爬虫</title>
    <link href="/2021/08/16/%E6%98%9F%E5%9B%BE%E7%88%AC%E8%99%AB/"/>
    <url>/2021/08/16/%E6%98%9F%E5%9B%BE%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="巨量星图接口签名"><a href="#巨量星图接口签名" class="headerlink" title="巨量星图接口签名"></a>巨量星图接口签名</h2><p>最近公司在对接星图，苦与开放API不满足需求，于是动了心思，看看星图的前端怎么拿数据的</p><h3 id="前端调试"><a href="#前端调试" class="headerlink" title="前端调试"></a>前端调试</h3><ol><li>先看看前端调用的接口，主要是sign比较麻烦</li></ol><p><img src="https://gitee.com/jzcccc/pig-go/raw/master/img/20220126161553.png" alt="image-20220126161550809"></p><ol start="2"><li>把请求添加到watch里，再从前端代码debug入手</li></ol><p><img src="https://gitee.com/jzcccc/pig-go/raw/master/img/20220126162032.png" alt="image-20220126161801577"></p><ol start="3"><li>一步步debug，看到md5前，加入了盐值，加了一个随机数</li></ol><p><img src="https://gitee.com/jzcccc/pig-go/raw/master/img/20220126162032.png" alt="image-20220126162029751"></p><hr><p>整个过程比较简单，前端拼接参数，md5加密后，放到sign参数上，携带上cookie就ok</p><h3 id="模拟前端访问"><a href="#模拟前端访问" class="headerlink" title="模拟前端访问"></a>模拟前端访问</h3><ol><li><p>从前端Network拷贝一个接口到postman，验证请求</p><p><img src="https://gitee.com/jzcccc/pig-go/raw/master/img/20220126162707.png" alt="image-20220126162705857"></p></li><li><p>加密参数，从前端看到，加密的方式是，{参数}{参数值}拼接的方式， 后面的service_method要一个个看。请求什么接口，用什么service_method是固定的，直接F12找到你要的接口即可。</p></li><li><p>待加密串</p><p><code>limit10page1queryqueryservice_methodDemanderGetUniversalDemandListservice_nametask.AdStarTaskServicesign_strict1e39539b8836fb99e1538974d3ac1fe98</code>  </p></li><li><p> 整个md5后，放到sign进行请求，header带上cookie值</p></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>主要就是找到前端的md5格式，星图加了个随机字符串，这个例子中的接口，只需要 <code>MD5(请求参数拼接➕随机数)</code> 即可。而且前后端是使用cookie，而不是token。</p><p>API爬虫虽简单，但其实还是需要懂一点前端知识、前端调试、前后端会话机制、加密签名、HTTP请求。</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java NIO &amp;&amp; Netty</title>
    <link href="/2021/07/22/Java-NIO-Netty/"/>
    <url>/2021/07/22/Java-NIO-Netty/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-NIO-Netty学习篇"><a href="#Java-NIO-Netty学习篇" class="headerlink" title="Java NIO Netty学习篇"></a>Java NIO Netty学习篇</h1><p>[TOC]</p><h2 id="Netty学习资料"><a href="#Netty学习资料" class="headerlink" title="Netty学习资料"></a>Netty学习资料</h2><h3 id="博客-公众号"><a href="#博客-公众号" class="headerlink" title="博客 公众号"></a>博客 公众号</h3><p>NIO、BIO、AIO 区别 <a href="https://www.cnblogs.com/javaguide/p/io.html">https://www.cnblogs.com/javaguide/p/io.html</a></p><p>IO模型知多少｜理论篇 <a href="https://www.cnblogs.com/sheng-jie/p/how-much-you-know-about-io-models.html">https://www.cnblogs.com/sheng-jie/p/how-much-you-know-about-io-models.html</a></p><p>netty从入门到踹门 <a href="https://mp.weixin.qq.com/s/GfV9w2B0mbT7PmeBS45xLw">https://mp.weixin.qq.com/s/GfV9w2B0mbT7PmeBS45xLw</a></p><p>并发编程网  Java NIO 系列教程 <a href="https://ifeve.com/java-nio-all/">https://ifeve.com/java-nio-all/</a></p><p>java nio 美团技术团队   Java NIO浅析 <a href="https://zhuanlan.zhihu.com/p/23488863">https://zhuanlan.zhihu.com/p/23488863</a></p><p>javaguide  netty从bio讲起，附带学习视频&amp;书籍推荐 <a href="https://github.com/Snailclimb/netty-practical-tutorial/blob/master/docs/1-fromBIO%26NIOToNetty.md">https://github.com/Snailclimb/netty-practical-tutorial/blob/master/docs/1-fromBIO%26NIOToNetty.md</a></p><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><p>Essential Netty in Action 《Netty 实战(精髓)》 <a href="https://waylau.com/essential-netty-in-action/index.html">https://waylau.com/essential-netty-in-action/index.html</a></p><p>UNIX网络编程卷1  链接: <a href="https://pan.baidu.com/s/1ThZSsi8o5EVtBjGwL9o1zw">https://pan.baidu.com/s/1ThZSsi8o5EVtBjGwL9o1zw</a>  密码: g32p</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>JavaGuide Netty面试题 <a href="https://xiaozhuanlan.com/topic/4028536971">https://xiaozhuanlan.com/topic/4028536971</a></p>]]></content>
    
    
    <categories>
      
      <category>netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器云之Kubernetes的本质</title>
    <link href="/2020/03/05/k8s1/"/>
    <url>/2020/03/05/k8s1/</url>
    
    <content type="html"><![CDATA[<h1 id="容器云之Kubernetes的本质"><a href="#容器云之Kubernetes的本质" class="headerlink" title="容器云之Kubernetes的本质"></a>容器云之Kubernetes的本质</h1><blockquote><p>深入剖析 Kubernetes 09 | 从容器到容器云：谈谈Kubernetes的本质</p></blockquote><h3 id="容器的本质"><a href="#容器的本质" class="headerlink" title="容器的本质"></a>容器的本质</h3><p>从前面几篇文章，可以理解，一个“容器”，实际上是由一个Linux Namespace、Linux Cgroups 和 rootfs 三种技术构建出来的进程的隔离环境。</p><p>所以关于容器，可以分两部分来看待</p><ul><li><p>一组联合挂载在 /var/lib/docker/aufs/mnt 上的 rootfs，这一部分我们称为“容器镜像”（Container Image），是容器的静态视图。</p></li><li><p>一个由 Namespace+Cgroups 构成的隔离环境，这一部分我们称为“容器运行时”（Container Runtime），是容器的动态视图。</p></li></ul><p>更近一步地说，作为一名开发者，我并不关心容器运行时的差异，<strong>因为在整个“开发-测试-发布”的流程中，真正承载着容器信息进行传递的，是容器镜像，而不是容器运行时。</strong></p><p>正式因为如此，Docker成功不久后，就迅速走向了“容器编排”这个“上层建筑”的主要原因。类似K8s的容器基础设施，只需要将用户提交的Docker镜像已容器方式运行起来，就能成为容器生态图上的一个承载点。更重要的是，能与CI/CD、安全、网络、存储等整合、贯穿整个应用生命周期链路。</p><h3 id="Kubernetes的设计"><a href="#Kubernetes的设计" class="headerlink" title="Kubernetes的设计"></a>Kubernetes的设计</h3><p>传统Paas项目</p><ul><li>提供容器部署能力</li><li>提供路由网关、水平扩展、监控、备份、灾难恢复等一系列运维能力</li></ul><p>如果说是部署、水平扩展等这种能力，那么只需要Docker的Compose+Swarm，再配合脚本即可实现，那么K8s就没有优势可言。</p><p><strong>Kubernetes的顶层设计</strong></p><img src="https://gitee.com/jzcccc/pig-go/raw/master/img/20220305161923.png" alt="image-20220305161915690" style="zoom:50%;" /><p><strong>控制节点</strong></p><p>分别为个部分：负责API服务的kube-apiserver、负责调度的kube-scheduler、以及负责容器编排的kube-controller-manager。整个集群的持久化数据，则由kube-apiserver处理后保存在Etcd。</p><p> <strong>计算节点</strong></p><p>kubelet主要负责同容器运行时（比如Docker项目）打交道。依赖**CRI(Container Runtime Interface)**的远程调用接口，这个接口定义了容器运行时的各种核心操作，比如：启动一个容器需要的所有参数。</p><p>具体的容器运行时，通过<strong>OCI</strong>这个容器运行时规范同底层Linux操作系统进行交互。即：把CRI请求翻译成为Linux操作系统的调用（操作Namespace和Cgroups等）。</p><p>Device Plugin插件则主要用于管理GPU等宿主机物理设备的主要组件。</p><p>Volume Plugin、Networking则是存储插件和网络插件，为容器实现网络配置和持久化存储，通过CNI(Container Networking Interface)和CSI(Container Storage Interface)接口交互。</p><p>K8s其实是参考Google内部的Borg项目，其最重要的设计体现在<strong>Master节点</strong></p><p><strong>如何编排、管理、调度用户提交的作业。</strong></p><p>基于Borg项目的经验，<strong>从一开始，Kubernetes 项目就没有像同时期的各种“容器云”项目那样，把 Docker 作为整个架构的核心，而仅仅把它作为最底层的一个容器运行时实现。</strong></p><p>而Kubernetes要解决的最重要的问题，是</p><p><strong>运行在大规模集群中的各种任务之间，实际上存在着各种各样的关系。这些关系的处理，才是作业编排和管理系统最困难的地方。</strong></p><p>可以参考平台我们的技术场景。比如Web与数据库之间的访问，Nginx与后端服务之间的代理关系，各种微服务之间的调用。或者同属于一个服务单位的不同功能之间，也存在这种关系。比如：一个Web应用于日志搜集组件之间的文件交换关系。</p><p>在容器技术普及之前，传统虚拟机环境的处理方式比较“粗力度”，可能会将这些有关联的服务部署在同一台虚拟机。</p><p>容器技术出现后，在微服务“功能单位”的划分上，有着“细粒度”优势：毕竟<strong>容器的本质，只是一个进程而已</strong></p><p>而如果是简单的编排，比如Web容器中，将DB容器的链接信息用“link”方式链接，当DB容器发生变化，环境变量也会随着更新。<strong>这就是平台项目自动地处理容器间关系的典型例子。</strong></p><p>如果只是简单的、小规模的这种关系，那么用Docker相关产品即可，而Kubernetes的厉害之处在于，<strong>一开始，就从顶层开始做好设计，满足普适性。</strong></p><p><strong>Kubernetes 项目最主要的设计思想是，从更宏观的角度，以统一的方式来定义任务之间的各种关系，并且为将来支持更多种类的关系留有余地。</strong></p><p>Kubernetes中最小的一个调度单位，为Pod。即可通过Localhost进行通信、或者访问同一个磁盘空间。</p><p>另外Service服务，作为Pod的代理入口，在集群内为Pod暴露一个固定的网络地址，进行Pod之间的交互。</p><p>围绕Pod不断向真实的技术场景扩展，可以摸索出Kubernetes项目核心功能的“全景图”</p><img src="https://gitee.com/jzcccc/pig-go/raw/master/img/20220305174428.png" alt="image-20220305171452930" style="zoom: 33%;" /><p>可以简单理解，Pod、Secret、Etcd、Service、Deployment等服务功能、解决了应用于应用之间的关系；而“编排对象”：Job、CronJob、DaemonSet等，用来描述我们试图管理的应用，解决“如何容器化这个应用”这个问题。</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
